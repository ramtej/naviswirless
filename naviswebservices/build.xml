<?xml version="1.0"?>

<project name="naviswebservices" default="install" basedir=".">
  
	<!-- macro definitions -->
    <macrodef name="compile">
        <attribute name="module"/>
        <attribute name="additional.src.dirs" default=""/>
        <element name="options" optional="yes"/>

        <sequential>
            <echo>Compiling @{module}...</echo>
            <mkdir dir="${build.dir}/@{module}/classes"/>
            <mkdir dir="${test.dir}/@{module}/classes"/>
            <javac srcdir="${src}/@{module};@{additional.src.dirs}"
                destdir="${build.dir}/@{module}/classes"
                debug="${compile.debug}"
                deprecation="${compile.deprecation}"
                optimize="${compile.optimize}"
                classpathref="@{module}.compile.classpath">
                <options/>
            </javac>
        	<!--
            <javac srcdir="test/@{module}"
                destdir="${test.dir}/@{module}/classes"
                debug="true">
                <classpath>
                    <path refid="@{module}.test.classpath"/>
                    <path location="${build.dir}/@{module}/classes"/>
                </classpath>
                <options/>
            </javac>
            -->
        </sequential>
    </macrodef>	
	
    <macrodef name="test-module">
        <attribute name="module"/>
        <attribute name="additional.src.dirs" default=""/>
        <element name="options" optional="yes"/>

        <sequential>
            <echo level="info">Testing @{module}...</echo>
            <mkdir dir="${test.dir}/data"/>
            <propertycopy name="testcase" from="@{module}-testcase" silent="true"/>
            <junit printsummary="no" forkmode="once" errorProperty="test.failed"
                failureProperty="test.failed" fork="${junit.fork}">
                <classpath>
                    <pathelement path="@{additional.src.dirs}"/>
                    <path refid="@{module}.test.classpath"/>
                    <pathelement location="${build.dir}/@{module}/classes"/>
                    <pathelement location="${test.dir}/@{module}/classes"/>
                    <pathelement path="${java.class.path}"/>
                    <pathelement path="${webapp.target}"/>
                    <pathelement path="${build.dir}/dao/gen"/>
                    <!-- For .properties and .xml files -->
                    <pathelement path="${build.dir}/web/classes"/>
                    <pathelement path="src/@{module}"/>
                </classpath>
                <jvmarg line="${run.appfuse.test.debugargline}"/>
                <formatter type="xml"/>
                <formatter type="brief" usefile="false"/>
                <batchtest todir="${test.dir}/data" if="testcase">
                    <fileset dir="${test.dir}/@{module}/classes">
                        <include name="**/*${testcase}*"/>
                        <exclude name="**/*TestCase.class"/>
                    </fileset>
                </batchtest>
                <batchtest todir="${test.dir}/data" unless="testcase">
                    <fileset dir="${test.dir}/@{module}/classes">
                        <include name="**/*Test.class*"/>
                    </fileset>
                </batchtest>
            </junit>

            <fail if="test.failed">
              Unit tests failed. For error messages, check the log files in
              ${test.dir}/data or run "ant test-reports"
              to generate reports at ${test.dir}/reports.</fail>
        </sequential>
    </macrodef>
	
	<!-- import properties (app settings, classpath, jar file locations) -->
    <import file="properties.xml"/>

	<target name="setup">	
		<filter token="log4j.logger.com.navis" value="${log4j.logger.com.navis}"/>    		 		
	</target>	

    <target name="init" description="defines custom tasks">
        <!-- Taskdefs -->
        <taskdef resource="net/sf/antcontrib/antcontrib.properties" classpath="${ant-contrib.jar}"/>
    	
        <!-- Ensure that Ant 1.6.2+ is being used -->
        <available classname="org.apache.tools.ant.DynamicAttribute" property="ant-1.6.2"/>
        <fail unless="ant-1.6.2" message="This application requires Ant 1.6.2 for faster unit testing"/>

        <!-- Check that junit.jar is in $ANT_HOME/lib or junit task fails -->
    	<!--
        <available classname="junit.framework.TestCase" property="junit.present"/>
        <fail unless="junit.present" message="Please copy junit.jar into ${env.ANT_HOME}/lib"/>
		-->
    	
        <!-- Test for Tomcat 5.0.x -->
        <available classname="org.apache.catalina.ant.SessionsTask" property="tomcat5">
            <classpath>
                <pathelement path="${tomcat.home}/server/lib/catalina-ant.jar"/>
            </classpath>
        </available>
        
	<!-- Set up a timestamp build property -->  
	<tstamp>
        	<format property="build.timestamp" pattern="MM/dd/yyyy hh:mm aa" unit="hour"/>
  	</tstamp>

        <!-- Test for Tomcat 5.5.x -->
        <available file="${tomcat.home}/common/lib/jasper-compiler-jdt.jar" property="tomcat5.5"/>
        
        <!-- Conditionally set property for converting to JSP 2.0 -->
        <condition property="convert.to.jsp2">
            <equals arg1="${jsp.2}" arg2="true"/>
        </condition>
    </target>
	
    <!-- Check timestamp on files -->
    <target name="prepare" depends="init" description="create target directories">
        <tstamp/>
        <tstamp><format property="copyright.year" pattern="yyyy"/></tstamp>
        <echo message="Preparing target directory '${webapp.target}'"/>
        <mkdir dir="${webapp.target}"/>
        <mkdir dir="${webapp.target}/WEB-INF"/>
        <mkdir dir="${webapp.dist}"/>
    </target>
	
	<target name="compile-web" depends="stage-web" description="Compile web module">
        <compile module="web"/>
    </target>
	
    <target name="stage-web" depends="copy-web-files"
        description="Calls other targets to gather static resources"/>
    
    <!-- ======================================================================= -->
    <!-- The "copy-web-files" target copies the static web/webservices resources -->
    <!-- portion of your web application source into the build target area       -->
    <!-- ======================================================================= -->
    <target name="copy-web-files" depends="prepare" description="Copy static files">
        <echo message="Copying static files"/>

    	<tstamp><format property="build.timestamp" pattern="EEEE MMM dd, yyyy 'at' hh:mm a zz"/></tstamp>	
    	    	
        <!-- Copy logging configuration files in metadata directory to target folder -->
        <copy todir="${webapp.target}/WEB-INF/classes" overwrite="true" filtering="true">
            <fileset dir="${metadata.dir}">
                <include name="commons-logging.properties"/>
                <include name="log4j.properties"/>
            </fileset>        	
        </copy>    	    	
    </target>
	
    <target name="package-web" depends="setup,compile-web" description="Package WAR">
        <propertyfile comment="Build Information" file="${build.dir}/web/classes/build.properties">
            <entry key="build.date" type="date" pattern="EEEE MMM dd, yyyy" value="now"/>
            <entry key="build.time" type="date" pattern="hh:mm:ss a zz" value="now"/>
            <entry key="webapp.version" value="${webapp.version}"/>
        </propertyfile>
    	
    	<!-- Copy metadata files (dd & wsdl) to target folder -->
    	<copy todir="${webapp.target}/WEB-INF" overwrite="true">
    		<fileset dir="${metadata.dir}">
       			<include name="*.xml"/>
    			<exclude name="*application.xml"/>
    		</fileset>
    	</copy>	    	
    	
        <!-- If Tomcat 5, uncomment the <dispatcher> elements in filter-mappings -->
        <echo>Preparing tomcat-context.xml for inclusion in war</echo>
        <!-- Copy tomcat-context.xml file to context.xml -->
        <if>
            <and>
                <isset property="tomcat5"/>
                <not><isset property="tomcat5.5"/></not>
            </and>
            <then>
                <copy tofile="${webapp.dist}/context.xml"
                    file="${metadata.dir}/tomcat-context.xml" overwrite="true">
                </copy>
            </then>
            <elseif>
                <isset property="tomcat5.5"/>
                <then>
                    <!--
                    <copy tofile="${webapp.dist}/context.xml"
                        file="${metadata.dir}/tomcat-context-5.5.xml" overwrite="true">
                    </copy>
                    -->
                </then>
            </elseif>
        </if>
       		
    	<!-- Generate the raw war file -->
        <war destfile="${webapp.dist}/${webapp.war}"
            webxml="${webapp.target}/WEB-INF/web.xml" compress="true">
            <fileset dir="${webapp.target}" excludes="**/web.xml,**/*-resources.xml"/>
            <metainf dir="${webapp.dist}" includes="context.xml"/>
        	
            <classes dir="${build.dir}/web/classes"/>

            <lib file="${dist.dir}/${webapp.name}-dao.jar"/>
        	<lib file="${jaf.jar}"/>
        	<lib file="${javamail.jar}"/>
            <lib file="${log4j.jar}"/>
        	<lib file="${jakarta-oro.jar}"/>			
			<lib file="${oro.jar}"/> 
        	<lib file="${fhsc-components.jar}"/>	
        	<lib file="${regexp.jar}"/>
			<lib file="${cache.jar}"/>
			<lib dir="${commons.dir}" includes="*.jar"/>   
        	<lib dir="${xml.dir}" includes="*.jar"/>
        	<lib dir="${jaxp.dir}" includes="*.jar"/>
        	<lib dir="${jaxb.dir}" includes="*.jar"/>
        	<lib dir="${jaxrpc.dir}" includes="*.jar"/>
        	<lib dir="${jaxws.dir}" includes="*.jar"/>
       		<lib dir="${saaj.dir}" includes="*.jar"/>
        	<lib dir="${fastinfoset.dir}" includes="*.jar"/>
        	<lib dir="${sjsxp.dir}" includes="*.jar"/>
        	<lib dir="${xmldsig.dir}" includes="*.jar"/>
       		<lib dir="${xws-security.dir}" includes="*.jar"/>
        </war>
		
    </target>

	<target name="package-application" depends="package-web" description="Package EAR">
	<!-- This is to overcome a weblogic classloader issue. -->
		<ear destfile="${webapp.dist}/${webapp.name}.ear" 
            appxml="${metadata.dir}/application.xml">
			<metainf dir="${metadata.dir}" includes="weblogic-application.xml"/>
			<fileset dir="${webapp.dist}" includes="${webapp.war}"/>
	    </ear>
    </target>

	<!-- =================================================================== -->
    <!--            Simple task to ping tomcat and make sure it's running    -->
    <!-- =================================================================== -->
    <target name="ping-tomcat" description="pings tomcat to make sure it's running">
        <echo level="info">Verifying that tomcat is running...</echo>
        <get src="http://${tomcat.server}:${http.port}/${webapp.name}"
            dest="../ping-${tomcat.server}.html"/>
    </target>
    <!-- =================================================================== -->
    <!--            Setup Tomcat                                             -->
    <!-- =================================================================== -->
    <target name="setup-tomcat" depends="init" if="tomcat.home"
        description="copies jdbc driver and context.xml to tomcat">
        <if>
            <and>
                <isset property="tomcat5"/>
                <not><isset property="tomcat5.5"/></not>
            </and>
            <then>
                <echo message="Detected Tomcat 5..."/>
                <echo level="info">Copying ${webapp.name}.xml...</echo>
                <copy tofile="${tomcat.home}/conf/Catalina/localhost/${webapp.name}.xml"
                    file="${metadata.dir}/tomcat-context.xml" overwrite="true">
                    <filterset refid="db.variables"/>
                </copy>
            </then>
            <elseif>
                <isset property="tomcat5.5"/>
                <then>
                    <echo message="Detected Tomcat 5.5..."/>
                    <echo level="info">Copying ${webapp.name}.xml...</echo>
                    <copy tofile="${tomcat.home}/conf/Catalina/localhost/${webapp.name}.xml"
                        file="${metadata.dir}/tomcat-context-5.5.xml" overwrite="true">
                        <filterset refid="db.variables"/>
                    </copy>
                </then>
            </elseif>
            <else>
                <echo message="Detected Tomcat 4..."/>
                <echo level="info">Copying ${webapp.name}.xml...</echo>
                <copy tofile="${tomcat.home}/webapps/${webapp.name}.xml"
                    file="${metadata.dir}/tomcat-context.xml" overwrite="true">
                    <filterset refid="db.variables"/>
                </copy>
            </else>
        </if>

        <echo level="info">Copying ${database.type} JDBC Driver...</echo>
        <copy todir="${tomcat.home}/common/lib" file="${jdbc.driver.jar}" overwrite="true"/>
        <echo level="info">Copying jta.jar...</echo>
        <copy todir="${tomcat.home}/common/lib">
            <fileset dir="${hibernate.dir}/lib" includes="jta.jar"/>
        </copy>
    </target>
    
    <!-- =================================================================== -->
    <!--            Internal targets to enable running in debug mode         -->
    <!-- =================================================================== -->
    <target name="check-debug" depends="with-debug,no-debug" />

    <target name="with-debug" if="appfuse-debug">
       	<property name="run.appfuse.test.debugargline" value="-Xdebug -Xnoagent -Xrunjdwp:transport=dt_shmem,address=appfuse-debug,server=y,suspend=y"/>
        <echo>Running in debug mode with shared memory address 'appfuse-debug'</echo>
    </target>

    <target name="no-debug" unless="appfuse-debug">
       <property name="run.appfuse.test.debugargline" value=""/>
    </target>

    <!-- =================================================================== -->
    <!--            Start Tomcat                                             -->
    <!-- =================================================================== -->
    <target name="start.tomcat"
        description="starts tomcat in the current console window" depends="check-debug">
        <java classname="org.apache.catalina.startup.Bootstrap" fork="yes">
            <jvmarg value="-Dcatalina.home=${tomcat.home}"/>
            <jvmarg line="${run.appfuse.test.debugargline}"/>
            <arg value="start"/>
            <classpath>
                <pathelement path="${java.home}/../lib/tools.jar"/>
                <fileset dir="${tomcat.home}">
                    <include name="bin/bootstrap.jar"/>
                </fileset>
            </classpath>
        </java>
    </target>
 	
    <target name="stop.tomcat"
        description="stops tomcat in the current console window" depends="check-debug">
        <java classname="org.apache.catalina.startup.Bootstrap" fork="true">
            <jvmarg value="-Dcatalina.home=${tomcat.home}"/>
            <jvmarg line="${run.appfuse.test.debugargline}"/>
            <arg value="stop"/>
            <classpath>
                <pathelement path="${java.home}/../lib/tools.jar"/>
                <fileset dir="${tomcat.home}">
                    <include name="bin/bootstrap.jar"/>
                </fileset>
            </classpath>
        </java>
    </target>
	
    <!-- ============================================================== -->
    <!-- Tomcat tasks - remove these if you don't have Tomcat installed -->
    <!-- ============================================================== -->
    <taskdef file="${ant-contrib.dir}/tomcatTasks.properties">
        <classpath>
            <pathelement path="${tomcat.home}/server/lib/catalina-ant.jar"/>
        </classpath>
    </taskdef>
	
    <target name="install" depends="package-web" description="Install application in Tomcat">
        <deploy url="${tomcat.manager.url}"
            username="${tomcat.username}"
            password="${tomcat.password}"
            path="/${webapp.name}"
            war="file:${webapp.dist}/${webapp.war}"/>
    </target>

    <target name="remove" description="Remove application in Tomcat">
        <undeploy url="${tomcat.manager.url}"
            username="${tomcat.username}"
            password="${tomcat.password}"
            path="/${webapp.name}"/>
    </target>

    <target name="reload" description="Reload application in Tomcat">
        <reload url="${tomcat.manager.url}"
            username="${tomcat.username}"
            password="${tomcat.password}"
            path="/${webapp.name}"/>
    </target>

    <target name="start" description="Start Tomcat application">
        <start url="${tomcat.manager.url}"
            username="${tomcat.username}"
            password="${tomcat.password}"
            path="/${webapp.name}"/>
    </target>

    <target name="stop" description="Stop Tomcat application">
        <stop url="${tomcat.manager.url}"
            username="${tomcat.username}"
            password="${tomcat.password}"
            path="/${webapp.name}"/>
    </target>

    <target name="list" description="List Tomcat applications">
        <list url="${tomcat.manager.url}"
            username="${tomcat.username}"
            password="${tomcat.password}"/>
    </target>


    <!-- Utilities -->
    <patternset id="java.files.pattern" includes="**/*.java"/>

    <target name="docs" depends="javadoc"
        description="runs javadoc tasks">
        <echo level="info">API and Reports generated successfully...</echo>
    </target>
	
    <!-- =================================================================== -->
    <!-- Create JavaDoc Documentation                                        -->
    <!-- =================================================================== -->
    <target name="javadoc" depends=""
        description="Generate JavaDoc API docs">
        <javadoc
            destdir="${build.dir}/docs/api"
            packagenames="org.*"
            author="true"
            version="true"
            windowtitle="${webapp.name} api"
            doctitle="&lt;h1&gt;${webapp.name} javadocs for
                version ${webapp.version}&lt;/h1&gt;"
            bottom="Copyright &#169; 2002-${copyright.year}"
            stylesheetfile="${build.dir}/docs/api/stylesheet.css">

            <fileset dir="${src}">
                <patternset refid="java.files.pattern"/>
            </fileset>
            <fileset dir="test">
                <patternset refid="java.files.pattern"/>
            </fileset>

            <classpath refid="web.test.classpath"/>
            <classpath>
                <pathelement location="${jmock.jar}"/>
                <pathelement location="${build.dir}/web/gen"/>
            </classpath>
            
            <!-- XDoclet Tags -->
            <tag name="hibernate.class" scope="all" description="Class:"/>
            <tag name="hibernate.id" scope="all" description="Id:"/>
            <tag name="hibernate.property" scope="all" description="Property:"/>
            <tag name="jsp.tag" scope="all" description="JSP Tag:"/>
            <tag name="jsp.attribute" scope="all" description="JSP Attribute:"/>
            <tag name="struts.action" scope="all" description="Mapping:"/>
            <tag name="struts.action-forward" scope="all" description="ActionForward:"/>
            <tag name="struts.form" scope="all" description="Form Name:"/>
            <tag name="struts.validator" scope="all" description="Validator:"/>
            <tag name="struts.validator-args" scope="all" description="Validator Args:"/>
            <tag name="struts.validator-var" scope="all" description="Validator Var:"/>
            <tag name="web.listener" scope="all" description="Listener:"/>
            <tag name="web.filter" scope="all" description="Filter:"/>
            <tag name="web.filter-prepare-param" scope="all" description="prepare-Param:"/>
            <tag name="web.filter-mapping" scope="all" description="Mapping:"/>
            <tag name="web.servlet" scope="all" description="Servlet:"/>
            <tag name="web.servlet-prepare-param" scope="all" description="prepare-Param:"/>
            <tag name="web.servlet-mapping" scope="all" description="Mapping:"/>
            
            <!-- Application frameworks -->
            <link href="http://jakarta.apache.org/commons/lang/api"/>
            <link href="http://jakarta.apache.org/struts/api"/>
            <link href="http://www.springframework.org/docs/api"/>
            <link href="http://www.hibernate.org/hib_docs/api"/>
            
            <!-- Testing frameworks -->
            <link href="http://www.junit.org/junit/javadoc/${junit.version}"/>
            <link href="http://strutstestcase.sf.net/api/"/>
            
            <!-- SDKs -->
            <link href="http://java.sun.com/j2se/1.4/docs/api/"/>
            <link href="http://java.sun.com/j2ee/sdk_1.3/techdocs/api/"/>
        </javadoc>
    </target>
	
    <!-- =================================================================== -->	
	<!--            Web Services JWSDP Tasks                                 -->
    <!-- =================================================================== -->
	
    <taskdef name="wsimport" classname="com.sun.tools.ws.ant.WsImport">
        <classpath refid="web.compile.classpath"/>
    </taskdef>
		
	<taskdef name="wscompile" classname="com.sun.xml.rpc.tools.ant.Wscompile">
		<classpath refid="web.compile.classpath"/>
	</taskdef>
	
	<taskdef name="wsdeploy" classname="com.sun.xml.rpc.tools.ant.Wsdeploy">
		<classpath refid="web.compile.classpath"/>
	</taskdef>

	<target name="create-war" depends="package-web"/>
	
	<target name="deploy-war" depends="install"/>
	
	<target name="hotdeploy">
		<copy todir="${tomcat.home}/webapps/${webapp.name}/pages" overwrite="true">
    		<fileset dir="${basedir}/web/pages">
	    		<include name="**/*.*"/>
    		</fileset>
		</copy>
		<copy todir="${tomcat.home}/webapps/${webapp.name}/styles" overwrite="true">
    		<fileset dir="${basedir}/web/styles">
	    		<include name="**/*.*"/>
    		</fileset>
		</copy>	
		<copy todir="${tomcat.home}/webapps/${webapp.name}/scripts" overwrite="true">
    		<fileset dir="${basedir}/web/scripts">
	    		<include name="**/*.*"/>
    		</fileset>
		</copy>			
	</target>	
			
	<taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
		<classpath refid="web.compile.classpath" />
	</taskdef>	
    
	<target name="schema2java">
		<xjc target="${src.dir}/dao" package="com.fhsc.soa.providerservices.persistence.xml.model" 
			removeOldOutput="yes">
			<schema dir="${metadata.dir}/wsserver" includes="*.xsd"/>
	    </xjc>
	</target>
	
	<target name="generate-ws-artifacts" depends="prepare,setup,compile-web">
		<taskdef name="apt" classname="com.sun.tools.ws.ant.Apt">
			<classpath refid="web.compile.classpath"/>
		</taskdef>	
		
		<apt debug="true" 
			verbose="true"
			destdir="${build.dir}/web"
			sourcedestdir="${src.dir}/web"
			sourcepath="${src.dir}/web">
			<classpath refid="web.compile.classpath"/>
			<option key="r" value="${build.dir}"/>
			<source dir="${src.dir}/web">
				<include name="**/*.java"/>
			</source>
		</apt>
		
		<!--
	    <taskdef name="wsgen" classname="com.sun.tools.ws.ant.WsGen">
	        <classpath refid="web.compile.classpath"/>
	    </taskdef>        
	    <wsgen resourcedestdir="${metadata.dir}"
	        sei="com.fhsc.druglookup.ws.implementation.DrugLookupDaoImpl"
	        keep="true"
	        sourcedestdir="${src.dir}/web"
	        destdir="${build.dir}/web"
	        genwsdl="true">
	        <classpath refid="web.compile.classpath"/>
	    	<classpath>
	    		<path location="${build.dir}/web"/>
	    	</classpath>	
	    </wsgen>		
		-->
		
	</target>

    <target name="generate-ws-testclient" depends="prepare,setup">
    	
    	<mkdir dir="${test.dir}/web/classes"/>
    	
        <wsimport
            debug="true"
            verbose="true"
            keep="false"
            extension="true"
        	sourceDestDir="${test.dir}/web"
            destdir="${test.dir}/web/classes"
            wsdl="${wsdl.location.clientservices}">
        </wsimport>
   	
    </target>	
	
    <target name="run-ws-testclient" >

        <javac srcdir="${test.dir}/web"
            destdir="${test.dir}/web/classes"
            debug="true">
            <classpath>
            	<path refid="web.compile.classpath"/>
            </classpath>
        </javac>		
		
	<java classname="us.naviscorp.soa.wsdl.clientservices.TestClient"
			fork="true">
	    	<classpath>
	    		<path refid="web.compile.classpath"/>
	    		<path location="${test.dir}/web/classes"/>
	    	</classpath>			
		</java>
		
	</target>
	
</project>
